// Code generated by array/numeric.gen.go.tmpl.
// DO NOT EDIT.

package array

import (
	"github.com/influxdata/arrow"
)

// A type which represents an immutable sequence of int64 values.
type Int64 struct {
	array
	values []int64
}

func NewInt64Data(data *Data) *Int64 {
	a := &Int64{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Int64) Value(i int) int64    { return a.values[i] }
func (a *Int64) Int64Values() []int64 { return a.values }

func (a *Int64) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Int64Traits.CastFromBytes(vals.Bytes())
	}
}

type Int64Valer interface {
	Value(int) int64
	Values() []int64
}

// A type which represents an immutable sequence of uint64 values.
type Uint64 struct {
	array
	values []uint64
}

func NewUint64Data(data *Data) *Uint64 {
	a := &Uint64{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Uint64) Value(i int) uint64     { return a.values[i] }
func (a *Uint64) Uint64Values() []uint64 { return a.values }

func (a *Uint64) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Uint64Traits.CastFromBytes(vals.Bytes())
	}
}

type Uint64Valer interface {
	Value(int) uint64
	Values() []uint64
}

// A type which represents an immutable sequence of float64 values.
type Float64 struct {
	array
	values []float64
}

func NewFloat64Data(data *Data) *Float64 {
	a := &Float64{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Float64) Value(i int) float64      { return a.values[i] }
func (a *Float64) Float64Values() []float64 { return a.values }

func (a *Float64) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Float64Traits.CastFromBytes(vals.Bytes())
	}
}

type Float64Valer interface {
	Value(int) float64
	Values() []float64
}

// A type which represents an immutable sequence of int32 values.
type Int32 struct {
	array
	values []int32
}

func NewInt32Data(data *Data) *Int32 {
	a := &Int32{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Int32) Value(i int) int32    { return a.values[i] }
func (a *Int32) Int32Values() []int32 { return a.values }

func (a *Int32) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Int32Traits.CastFromBytes(vals.Bytes())
	}
}

type Int32Valer interface {
	Value(int) int32
	Values() []int32
}

// A type which represents an immutable sequence of uint32 values.
type Uint32 struct {
	array
	values []uint32
}

func NewUint32Data(data *Data) *Uint32 {
	a := &Uint32{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Uint32) Value(i int) uint32     { return a.values[i] }
func (a *Uint32) Uint32Values() []uint32 { return a.values }

func (a *Uint32) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Uint32Traits.CastFromBytes(vals.Bytes())
	}
}

type Uint32Valer interface {
	Value(int) uint32
	Values() []uint32
}

// A type which represents an immutable sequence of float32 values.
type Float32 struct {
	array
	values []float32
}

func NewFloat32Data(data *Data) *Float32 {
	a := &Float32{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Float32) Value(i int) float32      { return a.values[i] }
func (a *Float32) Float32Values() []float32 { return a.values }

func (a *Float32) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Float32Traits.CastFromBytes(vals.Bytes())
	}
}

type Float32Valer interface {
	Value(int) float32
	Values() []float32
}

// A type which represents an immutable sequence of int16 values.
type Int16 struct {
	array
	values []int16
}

func NewInt16Data(data *Data) *Int16 {
	a := &Int16{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Int16) Value(i int) int16    { return a.values[i] }
func (a *Int16) Int16Values() []int16 { return a.values }

func (a *Int16) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Int16Traits.CastFromBytes(vals.Bytes())
	}
}

type Int16Valer interface {
	Value(int) int16
	Values() []int16
}

// A type which represents an immutable sequence of uint16 values.
type Uint16 struct {
	array
	values []uint16
}

func NewUint16Data(data *Data) *Uint16 {
	a := &Uint16{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Uint16) Value(i int) uint16     { return a.values[i] }
func (a *Uint16) Uint16Values() []uint16 { return a.values }

func (a *Uint16) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Uint16Traits.CastFromBytes(vals.Bytes())
	}
}

type Uint16Valer interface {
	Value(int) uint16
	Values() []uint16
}

// A type which represents an immutable sequence of int8 values.
type Int8 struct {
	array
	values []int8
}

func NewInt8Data(data *Data) *Int8 {
	a := &Int8{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Int8) Value(i int) int8   { return a.values[i] }
func (a *Int8) Int8Values() []int8 { return a.values }

func (a *Int8) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Int8Traits.CastFromBytes(vals.Bytes())
	}
}

type Int8Valer interface {
	Value(int) int8
	Values() []int8
}

// A type which represents an immutable sequence of uint8 values.
type Uint8 struct {
	array
	values []uint8
}

func NewUint8Data(data *Data) *Uint8 {
	a := &Uint8{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Uint8) Value(i int) uint8    { return a.values[i] }
func (a *Uint8) Uint8Values() []uint8 { return a.values }

func (a *Uint8) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Uint8Traits.CastFromBytes(vals.Bytes())
	}
}

type Uint8Valer interface {
	Value(int) uint8
	Values() []uint8
}

// A type which represents an immutable sequence of arrow.Timestamp values.
type Timestamp struct {
	array
	values []arrow.Timestamp
}

func NewTimestampData(data *Data) *Timestamp {
	a := &Timestamp{}
	a.refCount = 1
	a.setData(data)
	return a
}

func (a *Timestamp) Value(i int) arrow.Timestamp        { return a.values[i] }
func (a *Timestamp) TimestampValues() []arrow.Timestamp { return a.values }

func (a *Timestamp) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.TimestampTraits.CastFromBytes(vals.Bytes())
	}
}

type TimestampValer interface {
	Value(int) arrow.Timestamp
	Values() []arrow.Timestamp
}
